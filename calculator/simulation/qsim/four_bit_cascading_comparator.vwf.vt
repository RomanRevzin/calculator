// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/15/2022 12:57:03"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          four_bit_cascading_comparator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module four_bit_cascading_comparator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] op1;
reg [3:0] op2;
reg prev_equal;
reg prev_greater;
reg prev_less;
// wires                                               
wire equal;
wire greater;
wire less;

// assign statements (if any)                          
four_bit_cascading_comparator i1 (
// port map - connection between master ports and signals/registers   
	.equal(equal),
	.greater(greater),
	.less(less),
	.op1(op1),
	.op2(op2),
	.prev_equal(prev_equal),
	.prev_greater(prev_greater),
	.prev_less(prev_less)
);
initial 
begin 
#200000 $finish;
end 
// op1[ 3 ]
initial
begin
	op1[3] = 1'b1;
	op1[3] = #90000 1'b0;
end 
// op1[ 2 ]
initial
begin
	op1[2] = 1'b1;
	op1[2] = #90000 1'b0;
end 
// op1[ 1 ]
initial
begin
	op1[1] = 1'b1;
	op1[1] = #120000 1'b0;
end 
// op1[ 0 ]
initial
begin
	op1[0] = 1'b0;
	op1[0] = #30000 1'b1;
	op1[0] = #60000 1'b0;
	op1[0] = #30000 1'b1;
	op1[0] = #60000 1'b0;
end 
// op2[ 3 ]
initial
begin
	op2[3] = 1'b1;
	op2[3] = #90000 1'b0;
end 
// op2[ 2 ]
initial
begin
	op2[2] = 1'b1;
	op2[2] = #90000 1'b0;
end 
// op2[ 1 ]
initial
begin
	op2[1] = 1'b1;
	op2[1] = #90000 1'b0;
	op2[1] = #30000 1'b1;
	op2[1] = #30000 1'b0;
end 
// op2[ 0 ]
initial
begin
	op2[0] = 1'b1;
	op2[0] = #30000 1'b0;
	op2[0] = #30000 1'b1;
	op2[0] = #60000 1'b0;
	op2[0] = #30000 1'b1;
	op2[0] = #30000 1'b0;
end 

// prev_greater
initial
begin
	prev_greater = 1'b0;
	prev_greater = #100 1'b1;
	# 9900;
	repeat(6)
	begin
		prev_greater = 1'b0;
		prev_greater = #20100 1'b1;
		# 9900;
	end
	prev_greater = 1'b0;
end 

// prev_equal
initial
begin
	repeat(6)
	begin
		prev_equal = 1'b0;
		prev_equal = #20100 1'b1;
		# 9900;
	end
	prev_equal = 1'b0;
end 

// prev_less
initial
begin
	prev_less = 1'b0;
	prev_less = #10100 1'b1;
	# 9900;
	repeat(6)
	begin
		prev_less = 1'b0;
		prev_less = #20100 1'b1;
		# 9900;
	end
end 
endmodule

